import React, { useEffect } from 'react'
import { Routes, Route, useParams } from 'react-router-dom';
import {Modal} from '@mui/material';



import Form from '../input/form';

import WholeComponents from '../fourComponents/wholeComponents';
import WholePage from '../wholePages/wholePages';
import AlertMessage from './alertMessage.js'

import './basicDetails.css'
import './modalBuys.css'





export default function BasicDetails({currentSearchTicker,setCurrentSearchTicker}) {
    
    let { ticker } = useParams();
    const [detail, setDetail] = React.useState(null);
    const [latestPrice, setLatestPrice] = React.useState(null);
    const [companyPeers, setCompanyPeers] = React.useState(null);
    const [companyNews, setCompanyNews] = React.useState(null);
    const [companyInsiderSentiment, setCompanyInsiderSentiment] = React.useState(null);
    const [recommendationTrends, setRecommendationTrends] = React.useState(null);
    const [companyEarnings, setCompanyEarnings] = React.useState(null);
    const [companyHistoricalData, setCompanyHistoricalData] = React.useState(null);


    //summary chart
    const [dateInsummaryChart, setDateInsummaryChart] = React.useState({ unixStartDate: null, unixEndDate: null });

    //summary chart end 
    
    //value used for mongodb
    //要是存在会存入stock信息
    const [stockExisted, setStockExisted] = React.useState(null);

    const [modlaBuyOpen, setModlaBuyOpen] = React.useState(false);
    const [modlaSellOpen, setModlaSellOpen] = React.useState(false);


    const [money, setMoney] = React.useState(0);

    const [inputQuantityNumber, setInputQuantityNumber] = React.useState(0);
    const [inputSellQuantityNumber, setInputSellQuantityNumber] = React.useState(0);

    const [overBudget, setOverBudget] = React.useState(false);
    const [overQuantity, setOverQuantity] = React.useState(false);



    const [totalStockCost, setTotalStockCost] = React.useState(0);
    const [totalSelledStockGet, setTotalSelledStockGet] = React.useState(0);



    //value end

    //watchList

    const [existedInWatchList, setExistedInWatchList] = React.useState(false);

    //watchList end 

    
    const [marketOpen, setMarketOpen] = React.useState(false);
    const [positiveChange, setPositiveChange] = React.useState(false);



    //alert
    const [passedAlertMessage, setPassedAlertMessage] = React.useState({message:null,type:null});




    //generated by chatGPT
    function getTwoYearsAgoDate () {
        const now = new Date(); 
        now.setFullYear(now.getFullYear() - 2); 
        const twoYearsAgo = now.toISOString().split('T')[0]; 
        return twoYearsAgo;
      }
    

    //generated by chatGPT
    function unixToDate (unixTimestamp){
        const date = new Date(unixTimestamp * 1000);
        const year = date.getFullYear();

        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const day = date.getDate().toString().padStart(2, '0');
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');
        const seconds = date.getSeconds().toString().padStart(2, '0');
        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    }

    function printCloseDateTime (unixTimestamp){
        const date = new Date(unixTimestamp * 1000);
        const year = date.getFullYear();

        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const day = date.getDate().toString().padStart(2, '0');
        // const hours = date.getHours().toString().padStart(2, '0');
        // const minutes = date.getMinutes().toString().padStart(2, '0');
        // const seconds = date.getSeconds().toString().padStart(2, '0');
        return `${year}-${month}-${day} 13:00:00`;
    }


    //逻辑应该和想要的有些出入 毕竟下午一点关市场而不是零点
    function marketOpenOrNot (unixTimestamp){
          // 创建日期对象
        const date = new Date(unixTimestamp * 1000);
        const dayOfWeek = date.getDay();
        const hour = date.getHours();
        const minute = date.getMinutes();


        let endDate = new Date(date); 

        // 如果是周六或周日，调整到上周五 sunday or saturday -> friday
        if (dayOfWeek === 0) { 
            setMarketOpen(false)
            endDate.setDate(date.getDate() - 2);
            endDate.setHours(13, 0, 0, 0); 
            // setDateInsummaryChart(endDate)

        } 
        else if (dayOfWeek === 6) { 
            setMarketOpen(false)
            endDate.setDate(date.getDate() - 1);
            endDate.setHours(13, 0, 0, 0);
            // setDateInsummaryChart(endDate)
        } 
        else { // 工作日
            if (hour < 6 || (hour === 6 && minute < 30)) { // 在上午6:30之前
                setMarketOpen(false)

                endDate.setDate(date.getDate() - 1);
                endDate.setHours(13, 0, 0, 0);
                // setDateInsummaryChart(endDate)
            }
            else if(hour > 12){
                setMarketOpen(false)

                endDate.setHours(13, 0, 0, 0);
                // setDateInsummaryChart(endDate)
            }
            else{
                setMarketOpen(true)

                // setDateInsummaryChart(endDate)
            }

        }

        let startDate = new Date(endDate);
        startDate.setDate(endDate.getDate() - 1);
        const unixEndDate = Math.floor(endDate.getTime() / 1000);
        const unixStartDate = Math.floor(startDate.getTime() / 1000);

        setDateInsummaryChart({unixStartDate,unixEndDate})
        // return endDate;

    }



    //这俩是buy和sell按钮控制器
    const handleOpen = () => {
        console.log(modlaBuyOpen)
        setModlaBuyOpen(true);
    };

    const handleSellOpen= () =>{
        setModlaSellOpen(true)
    }
    //按钮end

    //buy 按钮变化
    const handleChange = (event) => {
        const quantityNum = event.target.value;
        setInputQuantityNumber(quantityNum);
        const total = quantityNum * latestPrice.currentPrice
        setTotalStockCost(total)

        // Calculate the price
        const price = money.money - total;

        if(price<0){
            setOverBudget(true)
        }
        else{
            setOverBudget(false)
        }
      };

    //sell 按钮变化
    const handleSellChange = (event) => {
        const maxQuantityNum = stockExisted.quantity;
        console.log(maxQuantityNum)
        const quantityNum = event.target.value;
        setInputSellQuantityNumber(quantityNum);
        const total = quantityNum * latestPrice.currentPrice
        setTotalSelledStockGet(total)


        if(maxQuantityNum<quantityNum){
            setOverQuantity(true)
        }
        else{
            setOverQuantity(false)
        }
    };


    // save to database
    const handleBuy =() =>{
        if(stockExisted==false){
            setStockExisted({quantity:  parseFloat(inputQuantityNumber)});
        }
        else{
            // 复制原有状态中的所有字段
            setStockExisted(data => ({
                ...data, 
                quantity: data.quantity +  parseFloat(inputQuantityNumber)
            }));
        }
        // console.log(stockExisted)
        setTotalStockCost(0)

        setModlaBuyOpen(false)
        setPassedAlertMessage({message: `${ticker.toUpperCase()} bought successfully.`, type: "buy"});


        const apiUrl = `${process.env.REACT_APP_API_URL}/dbUpdateStockMoney?ticker=${ticker}&newQuantity=${inputQuantityNumber}&newPrice=${totalStockCost}&companyName=${detail.name}&type=buy`;
      
        fetch(apiUrl)
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            console.log(data)
            setMoney(data)
            setInputQuantityNumber(0)
          })
          .catch(error => {
            console.error('Error:', error);
          });
    }

    const handleWatchList= async(ticker)=>{
        //存在 删除
        if(existedInWatchList){
            const response = await fetch(`${process.env.REACT_APP_API_URL}/dbDeleteWatchList?ticker=${ticker}`);
            const deletedInfo = await response.json();
            console.log(deletedInfo)
            setExistedInWatchList(false)
        }
        //不存在 加进去
        else{
            const response = await fetch(`${process.env.REACT_APP_API_URL}/dbInsertWatchList?ticker=${ticker}&companyName=${detail.name}`);
            const deletedInfo = await response.json();
            console.log(deletedInfo)

            setExistedInWatchList(true)


        }
        
        
    }

    const handleSell=()=>{
        //当把所有股票都卖光了 关闭sell按钮 exist设置为false
        const currentExistedQuantity =stockExisted.quantity - inputSellQuantityNumber
        if(currentExistedQuantity==0){
            setStockExisted(false)
        }
        else{
            setStockExisted(data => ({
                ...data, 
                quantity: currentExistedQuantity //更新quantity
            }));
        }
        // console.log(stockExisted)
        setModlaSellOpen(false)
        setTotalSelledStockGet(0)
        // console.log(apiUrl)
        setPassedAlertMessage({message: `${ticker.toUpperCase()} sold successfully.`, type: "sell"});


        const apiUrl = `${process.env.REACT_APP_API_URL}/dbSellStockMoney?ticker=${ticker.toUpperCase()}&newQuantity=${inputSellQuantityNumber}&newPrice=${totalSelledStockGet.toFixed(2)}`;

        // console.log(apiUrl)

        // Make the API call
        fetch(apiUrl)
          .then(response => {
            // if (!response.ok) {
            //   throw new Error('Network response was not ok');
            // }
            return response.json();
          })
          .then(data => {
            // console.log(data)
            setMoney(data)
            setInputSellQuantityNumber(0)
          })
          .catch(error => {
            console.error('Error:', error);
          });

    }



    React.useEffect(() => {
        if(ticker!='home'){
            setCurrentSearchTicker(ticker)
            // console.log("ticker change: "+ticker)
            const fetchDescription = fetch(`${process.env.REACT_APP_API_URL}/companyDescription?ticker=${ticker}`)
                .then(response => response.json());

            const fetchLatestPrice = fetch(`${process.env.REACT_APP_API_URL}/companyLatestPriceOfStock?symbol=${ticker}`)
                .then(response => response.json());

            const fetchCompanyPeers = fetch(`${process.env.REACT_APP_API_URL}/companyPeers?symbol=${ticker}`)
                .then(response => response.json());

            const fetchCompanyNews = fetch(`${process.env.REACT_APP_API_URL}/companyNews?symbol=${ticker}&from=2023-01-15&to=${new Date().toISOString().split('T')[0]}`)
                .then(response=> response.json())

            
            const fetchCompanyInsiderSentiment = fetch(`${process.env.REACT_APP_API_URL}/companyInsiderSentiment?symbol=${ticker}`)
                .then(response=> response.json())

            const fetchRecommendationTrends = fetch(`${process.env.REACT_APP_API_URL}/recommendationTrends?symbol=${ticker}`)
                .then(response=> response.json())

            const fetchCompanyEarnings = fetch(`${process.env.REACT_APP_API_URL}/companyEarnings?symbol=${ticker}`)
                .then(response=> response.json())

            const fetchCompanyHistoricalData = fetch(`${process.env.REACT_APP_API_URL}/companyHistoricalData?stockTicker=${ticker}&multiplier=1&timespan=day&from=${getTwoYearsAgoDate()}&to=${new Date().toISOString().split('T')[0]}`)
                .then(response=> response.json()) 

            const fetchStockExisted = fetch(`${process.env.REACT_APP_API_URL}/dbTickerExist?ticker=${ticker}`)
                .then(response=> response.json()) 

            const fetchMoney = fetch(`${process.env.REACT_APP_API_URL}/dbFindMoney`)
                .then(response=> response.json()) 

            const fetchWatchListExisted = fetch(`${process.env.REACT_APP_API_URL}/dbExistWatchList?ticker=${ticker}`)
                .then(response=> response.json()) 

            Promise.all([fetchDescription, fetchLatestPrice, fetchCompanyPeers, fetchCompanyNews,
                        fetchCompanyInsiderSentiment, fetchRecommendationTrends, fetchCompanyEarnings,
                        fetchCompanyHistoricalData, fetchStockExisted, fetchMoney,fetchWatchListExisted])
            .then(([descriptionData, latestPriceData, companyPeersData, companyNewsData,
                    companyInsiderSentimentData, recommendationTrendsData,
                    companyEarningsData, companyHistoricalDataData, stockExistedData,
                    moneyData,watchListExistedData]) => {
                marketOpenOrNot(latestPriceData.tradingDay)
                setPositiveChange(latestPriceData.Change>=0)
                
                setCompanyPeers(companyPeersData)
                setDetail(descriptionData);
                setLatestPrice(latestPriceData);
                setCompanyNews(companyNewsData)
                setCompanyInsiderSentiment(companyInsiderSentimentData)
                setRecommendationTrends(recommendationTrendsData)
                setCompanyEarnings(companyEarningsData)
                setCompanyHistoricalData(companyHistoricalDataData)
                setStockExisted(stockExistedData)
                setMoney(moneyData)
                setExistedInWatchList(watchListExistedData)
                // console.log("stockExistedData "+stockExistedData)

            })
            .catch(error => {
                console.error('a lot of api call error', error);
            });

        }
      }, [ticker]); 

    // if(ticker=='home'){
    //     console.log("为home")
    // }




  return (
    <div className='basicDetail-container'>
        <Form />
        {/* <WholePage /> */}
        {ticker !== 'home' && (
        <div>
            <div  className="stock-warning-part">
                <AlertMessage passedAlertMessage={passedAlertMessage}/>
             </div>

            <div className="stock-zone">

                <div className="stock-header">
                    <div>
                        <span className="stock-symbol">{ticker.toUpperCase()}</span>
                        <span className="stock-favorite" onClick={()=> handleWatchList(ticker)}>
                            {existedInWatchList?(
                                <span className="stock-favorite">&#9733;</span>
                                )
                                :
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star" viewBox="0 0 16 16">
                                    <path d="M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.56.56 0 0 0-.163-.505L1.71 6.745l4.052-.576a.53.53 0 0 0 .393-.288L8 2.223l1.847 3.658a.53.53 0 0 0 .393.288l4.052.575-2.906 2.77a.56.56 0 0 0-.163.506l.694 3.957-3.686-1.894a.5.5 0 0 0-.461 0z"/>
                                </svg>
                            }
                            </span>
                    </div>
                    <span className="stock-company-name">{detail?.name || null}</span>
                    <div className="stock-exchange">{detail?.exchange || null}</div>
                    <div>
                        <button className="buy-button" onClick={() => handleOpen()}>Buy</button>
                        {stockExisted?
                            <button className="sell-button" onClick={() => handleSellOpen()}>Sell</button>: null
                        }
                    </div>
                </div>

                <div className="stock-body">
                    <img className="stock-logo" src={detail?.logo || null} alt="Logo"></img>
                    <span className={`market-status ${marketOpen ? 'greenWords' : 'redWords'}`}>
                        {latestPrice? ( marketOpen ? 'Market is Open' : 'Market closed on ' +printCloseDateTime(latestPrice.tradingDay) ) : null }
                    </span>
                </div>

                <div className="stock-price">
                    <span className={`current-price ${positiveChange ? 'greenWords' : 'redWords'}`}>{latestPrice?.currentPrice || null}</span>
                    <span className={`price-change ${positiveChange ? 'greenWords' : 'redWords'}`}> {latestPrice?( positiveChange? ("▲" + latestPrice.Change)  : ("▼" + latestPrice.Change) ) : null} ({latestPrice?.percentageChange || null}%)</span>
                    <div className="time-status">
                        <   span className="timestamp">{latestPrice?unixToDate(latestPrice.tradingDay) : null}</span>
                    </div>
                </div>

            </div>

            <div>
                <WholeComponents ticker={ticker} latestPrice={latestPrice} detail={detail} companyPeers={companyPeers}
                                companyNews={companyNews} companyInsiderSentiment={companyInsiderSentiment} 
                                recommendationTrends={recommendationTrends}  companyEarnings={companyEarnings}
                                companyHistoricalData={companyHistoricalData} dateInsummaryChart={dateInsummaryChart}/>
            </div>        
         </div>
        )}


    {/* buy的modal界面 */}
    {(latestPrice && stockExisted!== null)? (
        <Modal open={modlaBuyOpen}>
            <div className="modal-content">
                <button className="closeButton" onClick={() => setModlaBuyOpen(false)}>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" className="bi bi-x" viewBox="0 0 16 16">
                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"/>
                    </svg>
                </button>
                <h1 className="modal-title">{ticker.toUpperCase()}</h1>
                <div className="modal-stockInfo">
                    <p>Current Price: ${latestPrice.currentPrice.toFixed(2)}</p>
                    <p>Money in Wallet: ${money.money.toFixed(2)}</p>
                    <div>
 
                        <label htmlFor="quantity">Quantity: </label>
                        <input type="number" id="quantity" className ="modal-input" name="quantity" min="0" value={inputQuantityNumber} onChange={handleChange}/>
                        {overBudget?
                            <p id='modal-overBudgetWarning'>Not enough money in wallet</p>
                        : null}
                    </div>
                
                </div>
                
                <div className="social-totalValue">
                    <span>Total: {totalStockCost.toFixed(2)}</span>
                    <button className="buy-button" 
                            disabled={overBudget} 
                            style={{ backgroundColor: overBudget ? "#9bbf9c" : '#47b74b' }}
                            onClick={handleBuy}>Buy</button>
                </div>
            </div>
        </Modal>
        ) 
    : null}


    {/* sell的modal界面 */}
    {latestPrice ? (
            <Modal open={modlaSellOpen}>
                <div className="modal-content">
                    <button className="closeButton" onClick={() => setModlaSellOpen(false)}>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" className="bi bi-x" viewBox="0 0 16 16">
                        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"/>
                        </svg>
                    </button>
                    <h1 className="modal-title">{ticker.toUpperCase()}</h1>
                    <div className="modal-stockInfo">
                        <p>Current Price: ${latestPrice.currentPrice.toFixed(2)}</p>
                        <p>Money in Wallet: ${money.money.toFixed(2)}</p>
                        <div>
                            <label htmlFor="quantity">Quantity: </label>
                            <input type="number" id="quantity" className ="modal-input" name="quantity" min="0" value={inputSellQuantityNumber} onChange={handleSellChange}/>
                            {overQuantity?
                                <p id='modal-overBudgetWarning'>You cannot sell the stocks that you don't have!</p>
                            : null}
                        </div>
                    
                    </div>
                    
                    <div className="social-totalValue">
                        <span>Total: {totalSelledStockGet.toFixed(2)}</span>
                        <button className="buy-button" 
                                disabled={overQuantity} 
                                style={{ backgroundColor: overQuantity ? "#9bbf9c" : '#47b74b' }}
                                onClick={handleSell}>Sell</button>
                    </div>
                </div>
            </Modal>
            ) 
        : null}




    </div>
  )
}

